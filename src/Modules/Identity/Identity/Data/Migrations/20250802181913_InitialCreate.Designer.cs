// <auto-generated />
using System;
using Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Identity.Data.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    [Migration("20250802181913_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("identity")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Identity.Authentication.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_refresh_token");

                    b.Property<string>("AppVersion")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("app_version");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("creado_por");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_eliminacion");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("eliminado_por");

                    b.Property<string>("DeletedReason")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("razon_eliminacion");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("device_id");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("device_name");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("ip_address");

                    b.Property<bool>("IsRevoked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_revoked");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_modificacion");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<DateTime>("LastUsed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_used");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("platform");

                    b.Property<string>("RevokedReason")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("revoked_reason");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("token");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("id_usuario");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_refresh_tokens_FechaCreacion");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("IX_refresh_tokens_FechaEliminacion");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("IX_RefreshTokens_DeviceId");

                    b.HasIndex("Enabled")
                        .HasDatabaseName("IX_refresh_tokens_Activo");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_RefreshTokens_ExpiresAt");

                    b.HasIndex("Platform")
                        .HasDatabaseName("IX_RefreshTokens_Platform");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("IX_RefreshTokens_Token");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_RefreshTokens_UserId");

                    b.HasIndex("UserId", "DeviceId")
                        .HasDatabaseName("IX_RefreshTokens_UserId_DeviceId");

                    b.ToTable("refresh_tokens", "identity");
                });

            modelBuilder.Entity("Identity.Modules.Models.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_modulo");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("creado_por");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_eliminacion");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("eliminado_por");

                    b.Property<string>("DeletedReason")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("razon_eliminacion");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("descripcion");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_modificacion");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nombre_modulo");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_modulos_FechaCreacion");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("IX_modulos_FechaEliminacion");

                    b.HasIndex("Enabled")
                        .HasDatabaseName("IX_modulos_Activo");

                    b.ToTable("modulos", "identity");
                });

            modelBuilder.Entity("Identity.Permissions.Models.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_permiso");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("creado_por");

                    b.Property<DateTime>("DateAssigned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_asignacion")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_eliminacion");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("eliminado_por");

                    b.Property<string>("DeletedReason")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("razon_eliminacion");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<Guid>("IdModule")
                        .HasColumnType("uuid")
                        .HasColumnName("id_modulo");

                    b.Property<Guid>("IdPermissionType")
                        .HasColumnType("uuid")
                        .HasColumnName("id_tipo_permiso");

                    b.Property<Guid>("IdRole")
                        .HasColumnType("uuid")
                        .HasColumnName("id_rol");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_modificacion");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_permisos_FechaCreacion");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("IX_permisos_FechaEliminacion");

                    b.HasIndex("Enabled")
                        .HasDatabaseName("IX_permisos_Activo");

                    b.HasIndex("IdModule");

                    b.HasIndex("IdPermissionType");

                    b.HasIndex("IdRole", "IdModule", "IdPermissionType")
                        .IsUnique()
                        .HasDatabaseName("IX_Permissions_Unique_Active");

                    b.ToTable("permisos", "identity");
                });

            modelBuilder.Entity("Identity.Permissions.Models.PermissionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_tipo_permiso");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("categoria");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("codigo");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("creado_por");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_eliminacion");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("eliminado_por");

                    b.Property<string>("DeletedReason")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("razon_eliminacion");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("descripcion");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_modificacion");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("nombre_permiso");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_tipos_permisos_FechaCreacion");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("IX_tipos_permisos_FechaEliminacion");

                    b.HasIndex("Enabled")
                        .HasDatabaseName("IX_tipos_permisos_Activo");

                    b.ToTable("tipos_permisos", "identity");
                });

            modelBuilder.Entity("Identity.Roles.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_rol");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("creado_por");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_eliminacion");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("eliminado_por");

                    b.Property<string>("DeletedReason")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("razon_eliminacion");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("descripcion");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_modificacion");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nombre_rol");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_roles_FechaCreacion");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("IX_roles_FechaEliminacion");

                    b.HasIndex("Enabled")
                        .HasDatabaseName("IX_roles_Activo");

                    b.ToTable("roles", "identity");
                });

            modelBuilder.Entity("Identity.Users.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_usuario");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("creado_por");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_eliminacion");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("eliminado_por");

                    b.Property<string>("DeletedReason")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("razon_eliminacion");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("email");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_modificacion");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nombre");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_usuarios_FechaCreacion");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("IX_usuarios_FechaEliminacion");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Enabled")
                        .HasDatabaseName("IX_usuarios_Activo");

                    b.ToTable("usuarios", "identity");
                });

            modelBuilder.Entity("Identity.Users.Models.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("creado_por");

                    b.Property<DateTime>("DateAssigned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_asignacion")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_eliminacion");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("eliminado_por");

                    b.Property<string>("DeletedReason")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("razon_eliminacion");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("activo");

                    b.Property<Guid>("IdRole")
                        .HasColumnType("uuid")
                        .HasColumnName("id_rol");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uuid")
                        .HasColumnName("id_usuario");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_modificacion");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modificado_por");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_usuarios_roles_FechaCreacion");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("IX_usuarios_roles_FechaEliminacion");

                    b.HasIndex("Enabled")
                        .HasDatabaseName("IX_usuarios_roles_Activo");

                    b.HasIndex("IdRole");

                    b.HasIndex("IdUser", "IdRole")
                        .IsUnique();

                    b.ToTable("usuarios_roles", "identity");
                });

            modelBuilder.Entity("Identity.Authentication.Models.RefreshToken", b =>
                {
                    b.HasOne("Identity.Users.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Identity.Permissions.Models.Permission", b =>
                {
                    b.HasOne("Identity.Modules.Models.Module", "Module")
                        .WithMany("Permissions")
                        .HasForeignKey("IdModule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Identity.Permissions.Models.PermissionType", "PermissionType")
                        .WithMany("Permissions")
                        .HasForeignKey("IdPermissionType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Identity.Roles.Models.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("PermissionType");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Identity.Users.Models.UserRole", b =>
                {
                    b.HasOne("Identity.Roles.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Identity.Users.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Identity.Modules.Models.Module", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Identity.Permissions.Models.PermissionType", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Identity.Roles.Models.Role", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Identity.Users.Models.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
